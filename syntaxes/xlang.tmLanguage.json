{
    "name": "XLang",
    "scopeName": "source.xlang",
    "fileTypes": [
        "x"
    ],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#expressions"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#control-flow"
        },
        {
            "include": "#types"
        },
        {
            "include": "#modifiers"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.xlang",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.xlang",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.xlang"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.xlang",
                    "match": "\\b(if|else|while|return|break|continue|yield|async|await|in|import|self|dyn|boundary|raise)\\b"
                },
                {
                    "name": "keyword.operator.logical.xlang",
                    "match": "\\b(and|or|not)\\b"
                },
                {
                    "name": "constant.language.xlang",
                    "match": "\\b(true|false|null)\\b"
                },
                {
                    "name": "storage.type.xlang",
                    "match": "\\b(int|float|string|bool|tuple|keyval|named|lambda|range|wrap)\\b"
                }
            ]
        },
        "expressions": {
            "patterns": [
                {
                    "include": "#return_yield_raise"
                },
                {
                    "include": "#tuple"
                },
                {
                    "include": "#let_expression"
                },
                {
                    "include": "#assign_expression"
                },
                {
                    "include": "#lambda_def"
                },
                {
                    "include": "#named_to"
                },
                {
                    "include": "#key_value"
                },
                {
                    "include": "#while_loop"
                },
                {
                    "include": "#if_statement"
                },
                {
                    "include": "#control_flow"
                },
                {
                    "include": "#or_expression"
                },
                {
                    "include": "#and_expression"
                },
                {
                    "include": "#not_expression"
                },
                {
                    "include": "#comparison_expression"
                },
                {
                    "include": "#add_sub_expression"
                },
                {
                    "include": "#mul_div_mod_expression"
                },
                {
                    "include": "#bitwise_or_expression"
                },
                {
                    "include": "#bitwise_and_expression"
                },
                {
                    "include": "#bitwise_xor_expression"
                },
                {
                    "include": "#bitwise_shift_expression"
                },
                {
                    "include": "#unary_expression"
                },
                {
                    "include": "#power_expression"
                },
                {
                    "include": "#range_expression"
                },
                {
                    "include": "#in_expression"
                },
                {
                    "include": "#modifier_expression"
                },
                {
                    "include": "#named_to_null"
                },
                {
                    "include": "#assume_tuple"
                },
                {
                    "include": "#alias_expression"
                },
                {
                    "include": "#member_access_or_call"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.xlang",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.xlang",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.xlang",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.xlang",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.triple.double.xlang",
                    "begin": "\"\"\"",
                    "end": "\"\"\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.xlang",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.triple.single.xlang",
                    "begin": "'''",
                    "end": "'''",
                    "patterns": [
                        {
                            "name": "constant.character.escape.xlang",
                            "match": "\\\\."
                        }
                    ]
                },
                {
                    "name": "string.quoted.raw.xlang",
                    "begin": "R\"\\w*\\(",
                    "end": "\\)\\w*\"",
                    "patterns": []
                },
                {
                    "name": "string.quoted.base64.xlang",
                    "begin": "\\$\"",
                    "end": "\"",
                    "patterns": []
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.xlang",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.float.xlang",
                    "match": "\\b[0-9]+\\.[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.hex.xlang",
                    "match": "\\b0x[0-9a-fA-F]+\\b"
                },
                {
                    "name": "constant.numeric.binary.xlang",
                    "match": "\\b0b[01]+\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.xlang",
                    "match": "(:=|=)"
                },
                {
                    "name": "keyword.operator.arithmetic.xlang",
                    "match": "(\\+|-|\\*|/|%|\\*\\*)"
                },
                {
                    "name": "keyword.operator.comparison.xlang",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.bitwise.xlang",
                    "match": "(\\&|\\||\\^|~|<<|>>)"
                },
                {
                    "name": "keyword.operator.logical.xlang",
                    "match": "(\\!)"
                },
                {
                    "name": "keyword.operator.accessor.xlang",
                    "match": "(\\.)"
                },
                {
                    "name": "keyword.operator.range.xlang",
                    "match": "(\\.\\.)"
                },
                {
                    "name": "keyword.operator.keyvalue.xlang",
                    "match": "(:)"
                },
                {
                    "name": "keyword.operator.named.xlang",
                    "match": "(=>)"
                },
                {
                    "name": "keyword.operator.arrow.xlang",
                    "match": "(->)"
                },
                {
                    "name": "keyword.operator.accessor.xlang",
                    "match": "(\\[|\\])"
                },
                {
                    "name": "keyword.operator.member.xlang",
                    "match": "(\\.)"
                },
                {
                    "name": "keyword.operator.assume_tuple.xlang",
                    "match": "(\\.\\.\\.)"
                },
                {
                    "name": "keyword.operator.alias.xlang",
                    "match": "(::)"
                },
                {
                    "name": "keyword.operator.nullcheck.xlang",
                    "match": "(\\?)"
                },
                {
                    "name": "keyword.operator.semi.xlang",
                    "match": "(;)"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function.definition.xlang",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=->|\\()",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.xlang"
                        }
                    }
                },
                {
                    "name": "meta.function.call.xlang",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.xlang"
                        }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.xlang",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "control-flow": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.xlang",
                    "match": "\\b(if|else)\\b"
                },
                {
                    "name": "keyword.control.loop.xlang",
                    "match": "\\b(while)\\b"
                },
                {
                    "name": "keyword.control.flow.xlang",
                    "match": "\\b(return|break|continue|yield)\\b"
                },
                {
                    "name": "keyword.control.module.xlang",
                    "match": "\\b(import)\\b"
                },
                {
                    "name": "keyword.control.async.xlang",
                    "match": "\\b(async|await)\\b"
                }
            ]
        },
        "types": {
            "patterns": [
                {
                    "name": "support.type.xlang",
                    "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "modifiers": {
            "patterns": [
                {
                    "name": "storage.modifier.xlang",
                    "match": "\\b(bind|deepcopy|copy|ref|deref|keyof|valueof|selfof|assert|import|wrap|typeof|await|wipe|aliasof|async|len)\\b"
                }
            ]
        },
        "return_yield_raise": {
            "name": "keyword.control.flow.xlang",
            "match": "\\b(return|yield|raise)\\b"
        },
        "tuple": {
            "name": "meta.tuple.xlang",
            "begin": "\\(",
            "end": "\\)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.section.tuple.begin.xlang"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "punctuation.section.tuple.end.xlang"
                }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#expressions"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#variables"
                },
                {
                    "include": "#control-flow"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#modifiers"
                },
                {
                    "name": "punctuation.separator.tuple.xlang",
                    "match": ","
                }
            ]
        },
        "let_expression": {
            "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(:=)",
            "captures": {
                "1": {
                    "name": "variable.declaration.xlang"
                },
                "2": {
                    "name": "keyword.operator.assignment.xlang"
                }
            }
        },
        "assign_expression": {
            "match": "=",
            "name": "keyword.operator.assignment.xlang"
        },
        "lambda_def": {
            "name": "meta.function.lambda.xlang",
            "begin": "\\(\\s*",
            "end": "\\)\\s*(->)\\s*(dyn)?",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.xlang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "keyword.operator.arrow.xlang"
                },
                "2": {
                    "name": "keyword.control.dyn.xlang"
                }
            },
            "patterns": [
                {
                    "include": "#variables"
                },
                {
                    "name": "punctuation.separator.parameter.xlang",
                    "match": ","
                }
            ]
        },
        "named_to": {
            "match": "(=>)",
            "name": "keyword.operator.named.xlang"
        },
        "key_value": {
            "match": "(:)",
            "name": "keyword.operator.keyvalue.xlang"
        },
        "while_loop": {
            "begin": "\\b(while)\\b",
            "end": "(?={)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.loop.xlang"
                }
            },
            "patterns": [
                {
                    "include": "#expressions"
                }
            ]
        },
        "if_statement": {
            "begin": "\\b(if)\\b",
            "end": "(?={)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.conditional.xlang"
                }
            },
            "patterns": [
                {
                    "include": "#expressions"
                }
            ]
        },
        "control_flow": {
            "match": "\\b(break|continue)\\b",
            "name": "keyword.control.flow.xlang"
        },
        "or_expression": {
            "match": "\\b(or)\\b",
            "name": "keyword.operator.logical.xlang"
        },
        "and_expression": {
            "match": "\\b(and)\\b",
            "name": "keyword.operator.logical.xlang"
        },
        "not_expression": {
            "match": "\\b(not)\\b",
            "name": "keyword.operator.logical.xlang"
        },
        "comparison_expression": {
            "match": "(==|!=|<=|>=|<|>)",
            "name": "keyword.operator.comparison.xlang"
        },
        "add_sub_expression": {
            "match": "(\\+|-)",
            "name": "keyword.operator.arithmetic.xlang"
        },
        "mul_div_mod_expression": {
            "match": "(\\*|/|%)",
            "name": "keyword.operator.arithmetic.xlang"
        },
        "bitwise_or_expression": {
            "match": "(\\|)",
            "name": "keyword.operator.bitwise.xlang"
        },
        "bitwise_and_expression": {
            "match": "(\\&)",
            "name": "keyword.operator.bitwise.xlang"
        },
        "bitwise_xor_expression": {
            "match": "(\\^)",
            "name": "keyword.operator.bitwise.xlang"
        },
        "bitwise_shift_expression": {
            "match": "(<<|>>)",
            "name": "keyword.operator.bitwise.xlang"
        },
        "unary_expression": {
            "match": "(\\+|-|~|!)",
            "name": "keyword.operator.unary.xlang"
        },
        "power_expression": {
            "match": "(\\*\\*)",
            "name": "keyword.operator.arithmetic.xlang"
        },
        "range_expression": {
            "match": "(\\.\\.)",
            "name": "keyword.operator.range.xlang"
        },
        "in_expression": {
            "match": "\\b(in)\\b",
            "name": "keyword.operator.in.xlang"
        },
        "modifier_expression": {
            "match": "\\b(deepcopy|copy|ref|deref|keyof|valueof|selfof|assert|import|wrap|typeof|await|wipe|aliasof|bind)\\b",
            "name": "storage.modifier.xlang"
        },
        "named_to_null": {
            "match": "(\\?)",
            "name": "keyword.operator.nullcheck.xlang"
        },
        "assume_tuple": {
            "match": "(\\.\\.\\.)",
            "name": "keyword.operator.assume_tuple.xlang"
        },
        "alias_expression": {
            "match": "(::)",
            "name": "keyword.operator.alias.xlang"
        },
        "member_access_or_call": {
            "patterns": [
                {
                    "match": "\\.([a-zA-Z_][a-zA-Z0-9_]*)",
                    "captures": {
                        "0": {
                            "name": "keyword.operator.accessor.xlang"
                        },
                        "1": {
                            "name": "variable.other.member.xlang"
                        }
                    }
                },
                {
                    "name": "meta.brackets.xlang",
                    "begin": "\\[",
                    "end": "\\]",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.begin.xlang"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.brackets.end.xlang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#expressions"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#operators"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#control-flow"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#modifiers"
                        },
                        {
                            "include": "#expressions"
                        }
                    ]
                },
                {
                    "name": "meta.function-call.xlang",
                    "begin": "\\(",
                    "end": "\\)",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.begin.xlang"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.end.xlang"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keywords"
                        },
                        {
                            "include": "#expressions"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#numbers"
                        },
                        {
                            "include": "#operators"
                        },
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#control-flow"
                        },
                        {
                            "include": "#types"
                        },
                        {
                            "include": "#modifiers"
                        },
                        {
                            "name": "punctuation.separator.arguments.xlang",
                            "match": ","
                        }
                    ]
                }
            ]
        }
    }
}